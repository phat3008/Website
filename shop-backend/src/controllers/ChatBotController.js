const axios = require('axios');
require('dotenv').config();
const fs = require('fs');
const path = require('path');

const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:streamGenerateContent';
const API_KEY = process.env.GEMINI_API_KEY;

exports.streamMessage = async (req, res) => {
    const { message } = req.body;

    if (!message || !message.trim()) {
        return res.status(400).json({ error: 'Message is required' });
    }

    // Thi·∫øt l·∫≠p headers SSE
    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    res.setHeader('Connection', 'keep-alive');
    res.flushHeaders();

    const filePath = path.join(__dirname, '../data/products_prompt_format.txt');
    const product_list = fs.readFileSync(filePath, 'utf8');

    const prompt_intro = (
        "B·∫°n l√† chuy√™n gia t∆∞ v·∫•n thi·∫øt b·ªã ƒëi·ªán t·ª≠.\n\n" +
        "üéØ Nhi·ªám v·ª•:\n" +
        "- Ch·ªâ d·ª±a v√†o danh s√°ch s·∫£n ph·∫©m b√™n d∆∞·ªõi ƒë·ªÉ t∆∞ v·∫•n.\n" +
        "- N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p, h√£y tr·∫£ l·ªùi: `Xin l·ªói, hi·ªán t·∫°i c·ª≠a h√†ng kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n.`\n" +
        "- N·∫øu danh s√°ch tr·ªëng, c≈©ng ph·∫£n h·ªìi t∆∞∆°ng t·ª±.\n\n" +
        "üí¨ N·∫øu ng∆∞·ªùi d√πng ch·ªâ ch√†o h·ªèi, h√£y ƒë√°p l·∫°i th√¢n thi·ªán nh∆∞: 'Ch√†o b·∫°n! B·∫°n mu·ªën t√¨m lo·∫°i m·∫°ch LED n√†o h√¥m nay?'\n\n" +
        "üß™ Khi t∆∞ v·∫•n:\n" +
        "- Ph√¢n t√≠ch nhu c·∫ßu ng∆∞·ªùi d√πng (v√≠ d·ª•: gi√° r·∫ª, c√≥ remote, d·ªÖ d√πng...)\n" +
        "- G·ª£i √Ω t·ªëi ƒëa 3 s·∫£n ph·∫©m ph√π h·ª£p, kh√¥ng li·ªát k√™ to√†n b·ªô danh s√°ch.\n" +
        "- Gi·∫£i th√≠ch l√Ω do s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn.\n\n" +
        "ü§ñ Phong c√°ch tr√≤ chuy·ªán: th√¢n thi·ªán, r√µ r√†ng, d·ªÖ hi·ªÉu."
    );
      

    const user_prompt = (
        prompt_intro +
        `\n\nC√¢u h·ªèi ng∆∞·ªùi d√πng: ${message}\n\n` +
        `Danh s√°ch s·∫£n ph·∫©m:\n${product_list}\n\n` +
        "Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng Markdown, bao g·ªìm:\n" +
        "- M·ªôt ƒëo·∫°n vƒÉn t∆∞ v·∫•n ng·∫Øn g·ªçn.\n" +
        "- M·ªôt ti√™u ƒë·ªÅ `###` ho·∫∑c `####`.\n" +
        "#### D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë s·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n:\n\n"+
        "- **T√™n s·∫£n ph·∫©m:** T√™n A  \n"+
        "  **Chi ti·∫øt s·∫£n ph·∫©m:** [Xem chi ti·∫øt](http://localhost:3000/product-details/id s·∫£n ph·∫©m a)\n"+
        "- **T√™n s·∫£n ph·∫©m:** T√™n B  \n"+
        "  **Chi ti·∫øt s·∫£n ph·∫©m:** [Xem chi ti·∫øt](http://localhost:3000/product-details/id s·∫£n ph·∫©m bb)\n\n"+
        "Ch·ªâ tr·∫£ v·ªÅ Markdown, kh√¥ng th√™m ch√∫ th√≠ch ngo√†i."
    );
      

    // Retry wrapper
    const sendRequestWithRetry = async (maxRetries = 3, delay = 2000) => {
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                return await axios({
                    method: 'post',
                    url: `${GEMINI_API_URL}?alt=sse&key=${API_KEY}`,
                    data: {
                        contents: [
                            {
                                role: "user",
                                parts: [{ text: user_prompt }]
                            }
                        ]
                    },
                    headers: { 'Content-Type': 'application/json' },
                    responseType: 'stream',
                });
            } catch (error) {
                const status = error.response?.status;
                console.warn(`‚è≥ Attempt ${attempt} failed. Status: ${status || error.message}`);

                if (attempt === maxRetries || (status && status !== 503)) {
                    throw error;
                }
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    };

    try {
        const response = await sendRequestWithRetry();

        response.data.on('data', (chunk) => {
            const lines = chunk.toString().split('\n');
            for (const line of lines) {
                if (line.startsWith('data: ')) {
                    const jsonStr = line.replace(/^data: /, '').trim();
                    if (!jsonStr || jsonStr === '[DONE]') continue;

                    try {
                        const parsed = JSON.parse(jsonStr);
                        const text = parsed?.candidates?.[0]?.content?.parts?.[0]?.text;
                        if (text) {
                            res.write(`data: ${text}\n\n`);
                        }
                    } catch (err) {
                        console.error('‚ùå JSON parse error:', err);
                    }
                }
            }
        });

        response.data.on('end', () => {
            res.write(`data: [DONE]\n\n`);
            res.end();
        });

        response.data.on('error', (error) => {
            console.error('‚ùå Stream error:', error);
            res.write(`data: {"error": "Stream error occurred"}\n\n`);
            res.end();
        });

    } catch (error) {
        console.error('‚ùå Error in streamMessage:', error.message);
        res.write(`data: {"error": "Failed to connect to Gemini API after retries"}\n\n`);
        res.end();
    }
};
